1. Генерация исключений.
Генерация исключений - особый вид ошибок, которые появляются при компиляции кода

2. try / except / else
Конструкция, способная обрабатывать исключения
В блоке try пишется исполняемый код, в процессе работы которого может возникнуть исключения
В блоке exept это исключения обрабатывается
Конструкция else предоставляет обработчик, подлежащий выполнению, если
никакие исключения не возникали

3. Сцепление исключений.
Происходит, когда в ответ на одно исключение, генерируется другое

4. Оператор assert.
Инструкция assert позволяет производить проверки истинности утверждений, что
может быть использовано в отладочных целях.
Если проверка не прошла, выбрасывается исключение AssertionError.

5. Диспетчер контекстов.
with выражение [as переменная]:
 операторы
Это и есть диспетчер контекстов, квадратные скобки - необязательная часть кода
Диспетчер контекстров основан на объектном протоколе, которе забирает выражение и работает с ним, как с переменной
Тут жёстко надо почитать об этом

6. Что такое автономный тест?
это автоматизированная часть кода, которая вызывает
тестируемую единицу кода и затем проверяет некоторые предположения о единственном
конечном результате этой единицы.

7. Параметризация тестовых функций.
Встроенный декоратор pytest.mark.parametrize позволяет параметризовать
аргументы тестовых функций.
@pytest.mark.parametrize("test_value,expected", [(1, 1), (10, 100), (3, 9)])
def test_eval(test_value, expected):
	assert test_value ** 2 == expected

8. Test fixture.
обеспечивает подготовку окружения для выполнения тестов, а также
организацию мероприятий по их корректному завершению (например очистка ресурсов).
Подготовка окружения может включать в себя создание баз данных, запуск необходимых
серверов и т. п.
Шаблон «фабрика-фикстура» может помочь в ситуациях, когда результат,
возвращаемый фикстурой, используется много раз в отдельном тесте. Вместо того, чтобы
напрямую возвращать данные, фикстура возвращает функцию, которая генерирует
данные. Затем эта функция может быть неоднократно вызвана в тесте.
Для того, чтобы зарегистрировать функцию как фикстуру, нужно использовать
декоратор @pytest.fixture.

9. Teardown/Cleanup
Фикстуры в pytest позволяют реализовать метод teardown, который
позволит определить необходимые шаги завершения.
Pytest поддерживает выполнение фикстурами специфического завершающего кода
при выходе из области действия. Если вы используете оператор yield вместо return, то
весь код после yield выполняет роль «уборщика»:

10. Autouse
Фикстуры вызываются автоматически, без явного указания их в
качестве аргумента(Здесь нужен жёсткий пример из лабы)

11. Маркировка тестов
Благодаря pytest.mark можно передавать метаданные в ваши тесты.
(чего?)

Запуск маркированного теста:
pytest -v -m my_custom_marker
или
python -m pytest -v -m my_custom_marker

12. Маркеры skip и xfail
skip используется в случае, когда вы ожидаете, что ваш тест пройдет только при
соблюдении некоторых условий, в противном случае pytest должен полностью
пропустить выполнение теста
xfail применяется, когда вы ожидаете, что тест по каким-то причинам должен
провалиться. Обычный пример – это тест на еще не реализованную функцию или еще не
исправленную ошибку. Когда тест, помеченный pytest.mark.xfail, проходит, несмотря
на ожидаемое падение, в сводке результатов он будет помечен как xpass.